package p1;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Observable;
import java.util.Observer;

public class IconServer implements Runnable {

	private IconManager im;
	private ServerSocket serverSocket;

	public IconServer(IconManager im, int port) {
		this.im = im;
		try {
			serverSocket = new ServerSocket(port);
		} catch (IOException e) {
			e.printStackTrace();
		}
		new Thread(this).start();
	}

	@Override
	public void run() {
		while (true) {
			try {
				Socket socket = serverSocket.accept();
				new ClientHandler(socket).start();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private class ClientHandler extends Thread implements Observer {
		private ObjectOutputStream oos;
		
		public ClientHandler(Socket socket) {
			im.addObserver(this);
			try {
				oos = new ObjectOutputStream(socket.getOutputStream());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		@Override
		public void update(Observable o, Object icon) {
			try {
				oos.writeObject(icon);
				oos.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
