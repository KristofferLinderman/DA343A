package p2;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Icon;

public class IconServer implements Runnable {
	private IconManager iconManager;
	private ServerSocket serverSocket;
	private Thread serverThread;

	public IconServer(IconManager iconManager, int port) {
		this.iconManager = iconManager;
		serverThread = new Thread(this);

		try {
			serverSocket = new ServerSocket(port);
			serverThread.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		System.out.println("Server running");
		while (true) {
			try {
				Socket socket = serverSocket.accept();
				new Listener(socket).start();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private class Listener extends Thread implements Observer {

		private Socket socket;
		private Icon icon, previousIcon = null;
		private ObjectOutputStream outputStream;

		public Listener(Socket socket) {
			iconManager.addObserver(this);
			try {
				outputStream = new ObjectOutputStream(socket.getOutputStream());
			} catch (IOException e) {
				e.printStackTrace();
			}
			this.socket = socket;
		}

		public void run() {

			try () {
				System.out.println("new Output");
				while (true) {

					// if (icon != null && icon != previousIcon) {
					System.out.println("in the icon");
					outputStream.writeObject(icon);
					outputStream.flush();
					System.out.println("written");
					previousIcon = icon;
					// }
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		@Override
		public void update(Observable o, Object icon) {
			icon = (Icon) icon;
			ou
		}
	}
}
