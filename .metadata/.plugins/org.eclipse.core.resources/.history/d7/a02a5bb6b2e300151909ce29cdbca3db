package p2;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Icon;

public class IconServer implements Runnable, Observer {
	private IconManager iconManager;
	private ServerSocket serverSocket;
	private Thread serverThread;
	private Buffer<Icon> iconBuffer;
	private Icon icon;

	public IconServer(IconManager iconManager, int port) {
		this.iconManager = iconManager;
		serverThread = new Thread(this);
		iconManager.addObserver(this);

		try {
			serverSocket = new ServerSocket(port);
			serverThread.start();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@Override
	public void run() {
		System.out.println("Server running");

		try (Socket socket = serverSocket.accept()) {
			new Listener(socket).start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void update(Observable o, Object icon) {
		this.icon = (Icon) icon;
	}

	private class Listener extends Thread {

		private Socket socket;

		public Listener(Socket socket) {
			this.socket = socket;
		}

		public void run() {

			try (ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
					ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());) {

				outputStream.writeObject(icon);
				outputStream.flush();
				System.out.println("written");

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
